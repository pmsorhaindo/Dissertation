PLAN! ^^ - This dissertation is going to kick ass ;)

==========================
Introduction.tex
==========================
------The project and what it should entail. -------------------------------------------(X)
------Alternative choices why I didn't pick them ---------------------------------------(X)                                      
------My choice  of Project ------------------------------------------------------------(X)
------Why it entails what it should entail ---------------------------------------------(X)
------Major Aspects --------------------------------------------------------------------(X)
------Summary of the Project -----------------------------------------------------------(?)
------Future Chapters ------------------------------------------------------------------(?)


==========================
Definitions
==========================
------From the research the following definitions for terms used in this project can be concluded (Defs and Accs with referenced meanings).
---Accronyms ---------------------------------------------------------------------------( )
-CPU -----------------------------------------------------------------------------------( )
-GPU -----------------------------------------------------------------------------------( )
---Terms -------------------------------------------------------------------------------( )
-Functional Programming ----------------------------------------------------------------( )
-Purity --------------------------------------------------------------------------------( )
-Deterministic/Non Deterministic -------------------------------------------------------( )
-Parallelism ---------------------------------------------------------------------------( )
-Concurrency ---------------------------------------------------------------------------( )


==========================
Context.tex
==========================

------Social, Ethical and Legal Issues - NEEDS TO BE PUT SOMEWHERE??? ------------------( )
---Intellectual property ---------------------------------------------------------------( )
---Research ethics ---------------------------------------------------------------------( ) 
---Plagiarism --------------------------------------------------------------------------( )

------Research Overview ----------------------------------------------------------------(X)
------Ant Colony Generalizations -------------------------------------------------------(X)
------Problem Area ---------------------------------------------------------------------(X)
------Research Aims --------------------------------------------------------------------(X)
------What I hope to learn -------------------------------------------------------------(?)

------Programming Paradigms ------------------------------------------------------------(?)
---Imperative --------------------------------------------------------------------------(X)
---Object Orientated -------------------------------------------------------------------(X)
---Functional --------------------------------------------------------------------------(X)
---Logical -----------------------------------------------------------------------------(?)
---Decision of Language ----------------------------------------------------------------(X)

------Development Language -------------------------------------------------------------(X)
---Erlang ------------------------------------------------------------------------------(X)
---Haskell -----------------------------------------------------------------------------(?)
---Scala -------------------------------------------------------------------------------(X)
---Choice ------------------------------------------------------------------------------(X)

------Approaches to Parallelism --------------------------------------------------------(X)
---The Limits of Parallelization -------------------------------------------------------(X)
---Software Transactional Memory -------------------------------------------------------(?)
---Data Parallelism --------------------------------------------------------------------(X)
---The Actor Model ---------------------------------------------------------------------(?)
---The Consumer Producer Model ---------------------------------------------------------(X)
---Divide and Conquer ------------------------------------------------------------------(?)
---Embarassingly Parallel --------------------------------------------------------------(?)

------Large Scale Simulations ----------------------------------------------------------(X)
---Networks simulations ----------------------------------------------------------------(?)
-What they are and what they do --------------------------------------------------------(?)
-Serial Time Slicing -------------------------------------------------------------------(?)
-Parallel Speed ups --------------------------------------------------------------------(?)
---Molecular dynamics ------------------------------------------------------------------(X)
-What they are and what they do --------------------------------------------------------(X)
-Three approaches of partitioning the problem to produce Parallelism -------------------(X)
---Biological Simulations --------------------------------------------------------------(D)
-What they are and what they do --------------------------------------------------------(D)
---Simulations for Games and Other Purposes --------------------------------------------(X)
-Parallel crowd simulations ------------------------------------------------------------(X)
-The work being done on the cell processor - "buckets" lattices and nearest n. ---------(D)


------Collision Detection --------------------------------------------------------------(X)
---A look at different methods of collision detection to prevent Ants colliding --------(D)
---Why each method is effective and disadvantages. -------------------------------------(D)
-Priori and Posteri / Discrete vs Continuous -------------------------------------------(X)
-Bounding Boxes various types ----------------------------------------------------------(X)
-Partitioning - Elluding to Paralleism -------------------------------------------------(X)

------Visual Representation ------------------------------------------------------------( )
---What it should include --------------------------------------------------------------( )
---Methods of producing it in Haskell --------------------------------------------------( )
-WxWidgets Benifits - Drawbacks --------------------------------------------------------( )
-Gtk+ -GTK Haskell Benifits - Drawbacks ------------------------------------------------( )
-Gloss - Seen in the REPA projects Unused why ------------------------------------------( )
-GLUT - Have experience with it --------------------------------------------------------( )

==========================
Requirements.tex
==========================
------Aims
----------------------------------------------------------------------------------------(X)
-Technical Aims ------------------------------------------------------------------------(X)
-Qualitative Aims ----------------------------------------------------------------------(X)
-Learning Outcomes ---------------------------------------------------------------------(X)

------Technical Requirements -----------------------------------------------------------(X)
---Data Structures ---------------------------------------------------------------------(X)
---Collision Detection -----------------------------------------------------------------(X)
---Demonstrate Speedup on a Serial Algorithm -------------------------------------------(X)
---Algebraic Test Driven Development ---------------------------------------------------(X)
-The Quick Check package ---------------------------------------------------------------(X)
-Test completeness ---------------------------------------------------------------------(D)
-Test correctness ----------------------------------------------------------------------(D)

------Qualitative Requirements ---------------------------------------------------------(X)
---Exploration Strategies --------------------------------------------------------------(X)
---Communication - locations of food -Other communication as an extension --------------(X)
---Return to ant Colony-----------------------------------------------------------------(X)

==========================
Design.tex
==========================

------Desgin techniques ----------------------------------------------------------------(X)
---Data types in Haskell as Design -----------------------------------------------------(X)
---UML is not limited to OOP. ----------------------------------------------------------(X)
-The other diagrams which may be applicable --------------------------------------------(X)
------Points to consider when desiging a parallel Algorithm ----------------------------(X)
---Granularity -------------------------------------------------------------------------(X)
---Load Balancing ----------------------------------------------------------------------(X)
---Dependancy - Dependancy Graphs ------------------------------------------------------(?)
---Scheduling --------------------------------------------------------------------------(?)

------High level parallel design discussion --------------------------------------------( )
---Map Reduce with respect to the problem ----------------------------------------------( )
-pMap(Implementation?) -----------------------------------------------------------------( )
-In a purely functional setting, elements of a list being computed by map cannot see the effects of the computations on other elements ---( )
-If order of application of f to elements in list is commutative, we can reorder or parallelize execution------( )
-This is the ``secret'' that MapReduce exploits ----------------------------------------(X)
---Actors ------------------------------------------------------------------------------(X)
- with respect to the problem ----------------------------------------------------------(X)
- more suited to Erlang ----------------------------------------------------------------( )
--- Embarassingly Parallel Areas to process --------------------------------------------(X)
-Pheremone Quadrant update -------------------------------------------------------------(X)

------Epochs of Design -----------------------------------------------------------------(X)
---The list based Worlds design free movement ------------------------------------------(X)
---List based Worlds location tags -----------------------------------------------------(X)
-Restriction and simplification --------------------------------------------------------(X)
---Graph based World Hold all ----------------------------------------------------------(D)
-Restriction and simplification --------------------------------------------------------(D)
---Graph based Worlds non parallel (split phermone food nest) --------------------------( )
-How the design choices have been influenced by research. ------------------------------( )
-Hyper jumping (ants holding the state if they had been moved or not(is that more processing) -----( )
-Message systems quadrants telling other quadrants that they wish to pass ants ---------( )
-STM edge cells being lockable concurrency style. --------------------------------------( )

---Graph based Worlds parallel ---------------------------------------------------------(X)
-How the design choices have been influenced by research. ------------------------------( )

---Types -------------------------------------------------------------------------------( )
-As explained important for composing Haskell functions --------------------------------( )
-Types used ----------------------------------------------------------------------------( )

---Predicted code flow of the application ----------------------------------------------(X)
---On the function level ---------------------------------------------------------------(X)
---Data flow ---------------------------------------------------------------------------(X)

------Mind map???possibiilty(on topic?) ------------------------------------------------(D)

Planning -------------------------------------------------------------------------------(X)

Risk Analysis --------------------------------------------------------------------------(?)


==========================
Implementation.tex
==========================

------Methodology - The progression of Feature sets -----------------------------------( )

------Emergence from research ---------------------------------------------------------( )

------List based Worlds free movement -------------------------------------------------( )
---All ants held ----------------------------------------------------------------------( )
---Persistance and updating -----------------------------------------------------------( )
---Complexity of the pheremone calculations would be out of the scope -----------------( )

------List based Worlds location tags -------------------------------------------------( )

------Graph based Worlds Hold all -----------------------------------------------------( )
---The introduction of Ant Behaviour (follow the highest Pheremone - Gets stuck in corners) ---( )
---Processing steps and parallelism ---------------------------------------------------( )
using pattern matching to break types down into parts Lists and recursion. ------------( )
---Implementing Quadrants and Worlds --------------------------------------------------( )
---Thread scope debugging (Move to later section to follow true chronological Order?)

------Graph based Worlds non parallel (split phermone food nest) ----------------------( )
---Printing Ant Quadrants for testing -^ Serial Mode ----------------------------------( )
-Debugging incorrectly sized grids ----------------------------------------------------( )
-:trace -------------------------------------------------------------------------------( )
-type Ambiguity -----------------------------------------------------------------------( )
---Stitching together the Graphs. (Ant Movement between Quadrants) --------------------( )
-Use of lazy evaluation in the fst snd selector of which stitch up effect. ------------( )
---Pheremone World (with Quadrants) ---------------------------------------------------( )
-Similar bugs a Quadrants -------------------------------------------------------------( )
-Reasoning about the program mathematically -------------------------------------------( )
---Printing ant Worlds for testing ----------------------------------------------------( )

------Developing the process loop. Parallel Strategies (exposing the embarassing parallelism). --( )
---Debugging the hanging loop ---------------------------------------------------------( )
-The use of HPC -----------------------------------------------------------------------( )
-the use of -Wall ---------------------------------------------------------------------( )
-Shadowing! >.< -----------------------------------------------------------------------( )
---Positioning new Ants in the world. -------------------------------------------------( )
---Debugging the edge case. -----------------------------------------------------------( )
-Positioning food locations. ----------------------------------------------------------( )
---Introduction of Food Quadrants for testing -----------------------------------------( )

------Graph based Worlds parallel -----------------------------------------------------( )
---Expanding Ant Behaviour (Exploration(Random)) --------------------------------------( )
--- `par `seq` annotations and other forms of denoting parallelism. -------------------( )
-Their failure. -----------------------------------------------------------------------( )
---Introducing the Nest -^ Parallel mode ----------------------------------------------( )

------Key functions --------------------------------------------------------------------( )
--- Important parallelizable functions -------------------------------------------------( )
-stitching Ant Quadrants ---------------------------------------------------------------( )
-stitching Pheremone Quadrants ---------------------------------------------------------( )
-processing Ant Quadrants --------------------------------------------------------------( )
-processing Pheremone Quadrants --------------------------------------------------------( )
---Important sequential functions ------------------------------------------------------( )
-Display -------------------------------------------------------------------------------( )
-Graph Density -------------------------------------------------------------------------( )
-ReQuading -----------------------------------------------------------------------------( )
-Display -------------------------------------------------------------------------------( )

------Haddock and documentation -------------------------------------------------------( )
------ GUI ----------------------------------------------------------------------------( )
--- wxcore fail built from scratch 4 times --------------------------------------------( )
--- GTK -------------------------------------------------------------------------------( )
--- Run simulation based on Settings --------------------------------------------------( )

------Testing -------------------------------------------------------------------------( )
---QuickCheck properties --------------------------------------------------------------( )
---Generating Test Data ---------------------------------------------------------------( )

==========================
Conclusion.tex
==========================

-----Extentions and Future work -------------------------------------------------------( )
---Memoisation -> Optimisation --------------------------------------------------------( )
---Quadrant splitting -----------------------------------------------------------------( )
- Naievely ----------------------------------------------------------------------------( )
-Barnes-Hut Algorithm -----------------------------------------------------------------( )
-Markov clusters ----------------------------------------------------------------------( )
-Graph averaging -??? Need to discuss? ------------------------------------------------( )
---Distrubuted mode -------------------------------------------------------------------( )
-Implementing Client Server (Remote. Cloud Haskell) -----------------------------------( )
---GPU acceleration -------------------------------------------------------------------( )

------Process Evaluation --------------------------------------------------------------( )
------Evaluation of Planning ----------------------------------------------------------( )
---Original Plan ----------------------------------------------------------------------( )
---Revised Plan -----------------------------------------------------------------------( )
---Actual Project Timeline. -----------------------------------------------------------( )

------ Evaluation of Design -----------------------------------------------------------( )
---Possibly too many changes ----------------------------------------------------------( )
---?

------Product Evaluation --------------------------------------------------------------( )
------Actual solutions Vs feasible alternatives ---------------------------------------( )
------Progress ------------------------------------------------------------------------( )
-Incomplete ---------------------------------------------------------------------------( )
-Algorithm with dynamic expansion potential -------------------------------------------( )
-Parallel speedup achieved based on sequential algorithm ------------------------------( )
-Proud of's... Speed up ---------------------------------------------------------------( )
---Problems and Solutions -------------------------------------------------------------( )
- Debugging ---------------------------------------------------------------------------( )
- QuickCheck Generation ---------------------------------------------------------------( )
- GUI ---------------------------------------------------------------------------------( )
- Producing ANY side affects / Monads. ------------------------------------------------( )
-Many problems stemmed from the use of a new language and new programming paradigm ----( )

---Lessons Learned --------------------------------------------------------------------( )
-Would have used a better Graph API (instance of Functor) -----------------------------( )
-Explored the Repa data structures (seemingly parallelism for free) -------------------( )
-Able to look at programming from a differet point of view ----------------------------( )
-Understand a lot more about parallelism. ---------------------------------------------( )

--more expert in the project area. ----------------------------------------------------( )
--used and integrated significant areas of the knowledge ------------------------------( )
--intellectual skills and practical abilities that you have acquired during your course and develop them further. ---( )
--plan and carry out work independently, over a lengthy period. -----------------------( )
--Shown capacity for responsible, self-directed work of high quality. -----------------( )



:::TODO's::
WRITE!!!!!!
pdf ALL the pictures and diagrams
analyse the sequential portion and  parallel portions of my program. REFER TO AMDAHL's
PRODUCE ACTUAL parallelism

Andrew suggests a "my worries about the final write up" talk with Aidan
-- latex Style .cls
-- size of bibliography
-- how does he prefer the sourcecode and documentation CD/printed. (He prefers appendixed) 

Remove some headers to make it seem less fragmenty (Dave)
More detail on Ant behaviour?? (Andrew)
What I have written in terms of structure.
Should the structure be changed
Details that may be lacking
Where does Aidan feel the emphasis should lie
Any areas to remove/add
use the word extrapolate
