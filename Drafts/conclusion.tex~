\documentclass[main.tex]{subfiles} 
\begin{document}
%% my conclusion content

\section{Further Work}

\paragraph{}There a few areas in the project that need to be looked at, ant behaviour could be more sophisticated and the problems regarding random placement of elements within the simulation world. Further work would resolve these issues and look for ways to increase the amount of parallelism generated by the current solution. Currently the simulation has a fixed partitioning system, future work would aim to make this dynamic to ensure better load balancing. Although graph partitioning algorithms generating equally sized graph segments with respect to vertex weight are NP-Complete \cite{Skiena2010}, there exist heuristics which can produce desirable results. If the absense or presence of an ant at a node on the graph is considered a node's weight, it may be possible to use algorithms to partition the graph according to density. Algorithms such as Markov clusters or Voronoi graphs could allow for the generation of such partitions within a simulation world's nodes. This would result in the benefit of more ants being processed within the center of quadrants rather than on the edge of quadrants, as less parallelism is produced at the quadrant edges.

\paragraph{}It would also be very interesting to develop similar algorithms in an imperative language like C++ and compare the complexity of the code as well as run time speeds. As this could further justify the choices made throughout this project or possibly call them into question. Another variation on the implementation which would be desirable to produce in further work would be incorporate distibutive programming via the actor model to increase scalability. This could be achieved by making use of the third party Haskell package Remote, sometimes called Cloud Haskell. Each core available on each machine in the network would then be assigned a quadrant and movement between quadrants could be handled entirely by message passing or each processor on the network could be assigned its own group of quadrants similar to a world graph and operate a divide and conquer strategy internally. Again, a comparison between these extensions would allow for the current implementation to be critiqued and analysed further.

%Explore the Repa data structures (seemingly parallelism for free) 
\paragraph{}During the final weeks of development the visualization of the simulation was revisited in order to produce a more user friendly and easier to view simulation. An effort was made to produce a GUI that would pass simulation settings and initialize a simulation without the need to recompile. Also a seprate window was run on a seperate thread with OpenGL capabilities in order to make use of colour when representing pheremone concentration. These efforts however are incomplete and it would also be nice to see this implemented fully in continued work.

%------Process Evaluation
\subsection{Evaluative Conclusion}
\paragraph{}Aspirations of the projects artifact where very high throughout the initial phase of the project and the undertaking of some of these plans in a new language was possibly an over estimation of what could be achieved within the time frame the project allowed. However, as the realities of what was being undertaken  increased through research and increased understanding throughout the implementation phase these expectations were adjusted. When taking this into consideration the outcomes of the project were being developed in a previously unknown programming language and paradigm,

%------Evaluation of Planning
%---Revised Plan
\paragraph{}During the earlier stages of the project it was necessary to revise the project plan as changes had occured to the design. The original plan allocated more time than needed for collision detection as in the final design collision detection involved very straight forward quieries into the datastructure. Also time spent on ant behaviour and and producing a visual element was dramatically reduced in favour of more essential requirements such as the resolving of ant movements between quadrants in order to achieve divide and conquer parallelism. 
%---Actual Project Timeline

%------ Evaluation of Design -----------------------------------------------------------( )
Throughout the design process of this project many decisions and changes made were influenced not only by development but by the research into the problem area of parallelism and through learning the purely functional programming language Haskell.  %What are these changes CAN'T THINK -.-


%------Product Evaluation
\paragraph{}There were other feasible solutions to the approach the design and development of this project has taken. The choice of programming language arguably slowed the development process however, the use of Haskell allowed for flexibility when introducing parallelism to the solution. When comparing the product to a solution that might have been produced in Erlang, a language considered closely for the project, it is possible that the Erlang solution would have scaled better as its support distributive programming is highly praised. On the other hand Scala may have allowed things to be developed faster as its interoperability with Java may have allowed for things to be achieved quickly that were a struggle to achieve functionally.

\paragraph{}The final product allows for the generation of simulation worlds of varying size, these worlds are composed of many quadrants which divide the simulation problem into partitions. The various simulation elements, the ants, nest and food, all stored in sepeate datastructures, can be randomly placed at locations in the world when provided coordinates. On running the simulation, ants behaviour is to move in the direction of the surrounding cell with the highest pheromone level. Non-deterministic parallelsm is also introduced into the process of resolving ant movements between quadrants, by organizing a process order and for elements which can't be parallelized and grouping those which can the groups can. The product also allows for the manipulation of pheromones so pheromone levels can lower over time. Finally the results of each simulation step can be printed out to the screen, thereby confirming the simulation has evaluated a step and allowing the viewer to observe ant behaviour. Use of Haskell's type system to generate pure functions is demonstrated throughout the project and algebraic tests have been written for critical functions which are responsible for graph generation.

\paragraph{}There are a problems with the simulation in terms of scale, when the simulation is executed with worlds larger than twelve by twelve quadrants containing one hundred and fourty four nodes each, the simulation runs out of memory on the systems it has been tested on. Nevertheless, the simulation has not been tested on systems posessing more than two cores or more than 3GB of RAM, both of which may allow the simulation to scale to larger sizes. Also, as mentioned during the implementation section there are issues with the non-deterministic values introduced through the use of the Random monad, although the values are fed into pure functions errors are caused due to the attempted access of non-existant locations in lists when adding larger amounts of ants to the simulation. Dispite these flaws a parallel algorithm with potential to scale with the problem size has been presented, with tests showing portions of the program running in parallel.

%- Producing ANY side affects / Monads.

%-Many problems stemmed from the use of a new language and new programming paradigm ----( )

%-finally, an assessment of the "success or failure of the project as a whole."

%---Problems and Solutions - Debugging!
Using libraries like debug trace was ineffective

%---Lessons Learned --------------------------------------------------------------------( )
\paragraph{}There have been many lessons learned over the course of this dissertation project, a deeper understanding around the topics of  parallelism and concurrency has been gained. Various programming models for achieving parallelism and concurrency have been observed as well as the use of parallelism in industrial and academic simulations. Now that the project is has grown in size it is possible to look at programming from a differet point of view that learning functional programming has provided, this newly developed skill has been put to use by way of producing a project developed in a purely functional language. It has also

If the Data.Graph had been an instance of Functor one could have mapped over its nodes with a function that checked the node held the desired value before processing it. There are other libraries which provide implementations of the graph data structure. However, data structures which extend typeclasses such as Functor or the Applicative typeclasss may produce code which is more difficult to follow, for programmers who are not acustomed to Haskell, when combinations of symbols are used to map functions over the data structure such as (<*>). 


Functional programming languages are not commonly used within the games industry but the influence of languages such as Haskell is being seen in languages such as C# and python which are both commonly used in the games industry. The future of computing depends on parallelism (for efficiency), distribution (for scale), and verification (for quality).  Only functional languages support all three naturally and conveniently [cite ? existential type]; other programming paradigms don.


somethings have beeen significantly enhanced (reasons).



%MAKE SURE TO INCLUDE!!!!!!!!!!!!!!!!!!!! SO IMPORTANT
%--more expert in the project area. ----------------------------------------------------( )
Developed the capacity to program in functional paradigm
%--used and integrated significant areas of the knowledge ------------------------------( )

%--intellectual skills and practical abilities that you have acquired during your course and develop them further. ---( )

%--plan and carry out work independently, over a lengthy period. -----------------------( )

%--Shown capacity for responsible, self-directed work of high quality. -----------------( )
\end{document}
%AWC[1532]
